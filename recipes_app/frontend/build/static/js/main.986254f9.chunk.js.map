{"version":3,"sources":["components/Login.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Login","props","mySubmitHandler","event","preventDefault","username","document","getElementsByName","password","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","a","json","data","ok","error","message","status","Promise","reject","setState","postId","id","console","log","catch","errorMessage","toString","state","title","onSubmit","this","type","name","React","Component","ReactDOM","render","getElementById","App","className","href","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"kQAYMA,E,kDACF,WAAYC,GAAe,IAAD,8BACtB,cAAMA,IAiCVC,gBAAkB,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAWC,SAASC,kBAAkB,YACtCC,EAAWF,SAASC,kBAAkB,YACtCE,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAET,SAAUA,EAAUG,SAAUA,KAEzDO,MAAM,cAAeN,GAChBO,KADL,uCACU,WAAMC,GAAN,iBAAAC,EAAA,sEACiBD,EAASE,OAD1B,UACIC,EADJ,OAIGH,EAASI,GAJZ,uBAMQC,EAASF,GAAQA,EAAKG,SAAYN,EAASO,OANnD,kBAOSC,QAAQC,OAAOJ,IAPxB,OAUF,EAAKK,SAAS,CAAEC,OAAQR,EAAKS,KAC7BC,QAAQC,IAAIX,GAXV,2CADV,uDAcKY,OAAM,SAAAV,GACH,EAAKK,SAAS,CAAEM,aAAcX,EAAMY,aACpCJ,QAAQR,MAAM,sBAAuBA,OAzD7C,EAAKa,MAAQ,CACT9B,SAAU,GACVG,SAAU,IAJQ,E,qDAQ1B,WAAqB,IAAD,OAEVC,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEsB,MAAO,gCAElCrB,MAAM,cAAeN,GAChBO,KADL,uCACU,WAAMC,GAAN,iBAAAC,EAAA,sEACiBD,EAASE,OAD1B,UACIC,EADJ,OAIGH,EAASI,GAJZ,uBAMQC,EAASF,GAAQA,EAAKG,SAAYN,EAASO,OANnD,kBAOSC,QAAQC,OAAOJ,IAPxB,OAUF,EAAKK,SAAS,CAAEC,OAAQR,EAAKS,KAV3B,2CADV,uDAaKG,OAAM,SAAAV,GACH,EAAKK,SAAS,CAAEM,aAAcX,EAAMY,aACpCJ,QAAQR,MAAM,sBAAuBA,Q,oBAiCjD,WACI,OACI,uBAAMe,SAAUC,KAAKpC,gBAArB,UACI,iDACA,uBACIqC,KAAK,OACLC,KAAK,aAET,qDACA,uBACID,KAAK,WACLC,KAAK,aAET,wBAAQD,KAAK,SAAb,2B,GA7EIE,IAAMC,WAmFX1C,IAEf2C,IAASC,OAAO,cAAC,EAAD,IAAWtC,SAASuC,eAAe,SCxEpCC,MArBf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,sCACO,+CADP,0BAGA,mBACEA,UAAU,WACVC,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,4BASF,cAAC,EAAD,QCNSC,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHpBT,IAASC,OAAO,cAAC,EAAD,IAAOtC,SAASuC,eAAe,SAK/CM,M","file":"static/js/main.986254f9.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface IState {\n    username: string,\n    password: string,\n    postId?: any,\n    errorMessage?: any;\n}\n\ninterface Props { }\n\nclass Login extends React.Component<Props, IState> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            username: '',\n            password: '',\n        };\n    }\n\n    componentDidMount() {\n        // POST request using fetch with error handling\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ title: 'React POST Request Example' })\n        };\n        fetch('/api/token/', requestOptions)\n            .then(async response => {\n                const data = await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.message) || response.status;\n                    return Promise.reject(error);\n                }\n\n                this.setState({ postId: data.id })\n            })\n            .catch(error => {\n                this.setState({ errorMessage: error.toString() });\n                console.error('There was an error!', error);\n            });\n    }\n\n    mySubmitHandler = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const username = document.getElementsByName(\"username\");\n        const password = document.getElementsByName(\"password\");\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ username: username, password: password })\n        };\n        fetch('/api/token/', requestOptions)\n            .then(async response => {\n                const data = await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.message) || response.status;\n                    return Promise.reject(error);\n                }\n\n                this.setState({ postId: data.id })\n                console.log(data)\n            })\n            .catch(error => {\n                this.setState({ errorMessage: error.toString() });\n                console.error('There was an error!', error);\n            });\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.mySubmitHandler}>\n                <p>Enter your name:</p>\n                <input\n                    type='text'\n                    name='username'\n                />\n                <p>Enter your password:</p>\n                <input\n                    type='password'\n                    name='password'\n                />\n                <button type=\"submit\">Submit</button>\n            </form>\n        );\n    }\n}\n\nexport default Login;\n\nReactDOM.render(<Login />, document.getElementById('root'));","import React from 'react';\nimport './App.css';\nimport Login from './components/Login';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <Login></Login>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}